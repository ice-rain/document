@Test 对于要测试的方法进行注解

测试文件与源码文件分开 test测试文件夹（Test root）src（sources root）

对于类的测试产生测试类方法采用测试快捷键 ctrl + alt + t 打开测子菜单

常用测试注解
@Test：把一个方法标记为测试方法
@Before：每一个测试方法执行前自动调用一次；每次测试之前执行
@After：每一个测试方法执行完自动调用一次；每次测试之后执行
@BeforeClass：所有测试方法执行前执行一次，在测试类还没有实例化就已经被加载，所以用static修饰；常用于测试资源的开始
@AfterClass：所有测试方法执行完执行一次，在测试类还没有实例化就已经被加载，所以用static修饰；常用于测试资源的结束
@Ignore：暂不执行该测试方法

idea单元测试对于每个要测试的内容互不影响，每次在测试时，都会重新实例化测试方法。

@excepted 异常测试，当出现异常是测试是否抛出异常
@Test (excepted = Exception.class)
public void testname() throws Exception{
	new Math().factorial(-1);// 异常测试用例
	fail("testname 没有抛出异常“)
}
这个方法就是(expected = Exception.class)和fail("factorial参数为负数没有抛出异常");之间的配合。
就是这个测试方法会检查是否抛出Exception异常（当然也可以检测是否抛出其它异常），如果抛出了异常那么测试通过（因为你的预期就是传进负数会抛出异常）。
没有抛出异常则测试不通过执行fail("factorial参数为负数没有抛出异常");

@timeout
@Test (timeout = 2000)[单位毫秒]
public void testname() throws Exception{
}

然后说下timeout属性，这个是用来测试性能的，就是测试一个方法能不能在规定时间内完成。

编辑测试设置 run-edit config
fork模式让用户在单独的进程中运行每一个测试
code coverage 调整代码测试覆盖度